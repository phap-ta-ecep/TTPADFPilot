{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ttpDatafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/plp_ETL_Sub')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETL-1-1-1-Lookup file_status is ER",
						"description": "Get list file name with configId=$id and file_status='ER'",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select a.file_name ,b.data_file_target_schema,b.data_file_target_table,b.container_dir,b.import_dir\n,b.success_dir,b.error_dir, b.delimiter\nfrom control.data_file a\nleft join control.data_file_configuration b on a.data_file_config_id = b.data_file_config_id \nwhere a.file_status in ('ER') and a.data_file_config_id =@{pipeline().parameters.configId}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Pilot_SQL_Broad",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Null",
									"schema": "Null"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ETL-1-1-3-ForEach",
						"description": "For loop list file from result lookup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ETL-1-1-2-Truncate temp table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ETL-1-1-1-Lookup file_status is ER').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ETL-1-1-3-8 IF Check isExtractFail",
									"description": "If isExtractFail = true => stop process extract file from file to ods on configId",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "ETL-1-1-3-1-Set variable Container",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-3 Set variable fileName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-2-Set variable Directory",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-4-Set variable sinkSchema",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-5 Set variable sinkTableName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-6 Set variable desDirectory",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-7 Set variable columnDelimiter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('isExtractFail')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "ETL-1-1-3-8-1 Copy file to temp table",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_Pilot_Blod_Broad",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('container')",
																"type": "Expression"
															},
															"directory": {
																"value": "@variables('directory')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"columnDelimiter": "\t"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Pilot_SQL_Broad",
														"type": "DatasetReference",
														"parameters": {
															"tableName": {
																"value": "@variables('tableName')",
																"type": "Expression"
															},
															"schema": {
																"value": "@variables('tableSchema')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "ETL-1-1-3-8-7 Set isExtractFail  is True",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-3 Update status to EF",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isExtractFail",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-8 Append fileName to listFileName",
												"type": "AppendVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-5 Update guid to temp table",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "listFileName",
													"value": {
														"value": "@variables('fileName')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-5 Update guid to temp table",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-2 Update status to TR",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Data_File_Id]",
													"storedProcedureParameters": {
														"fileName": {
															"value": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"tableName": {
															"value": {
																"value": "@concat(variables('tableSchema'), '.' , variables('tableName'))",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "ETL-1-1-3-8-3 Update status to EF",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-1 Copy file to temp table",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
													"storedProcedureParameters": {
														"fileName": {
															"value": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_run_id": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_count": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"staging_load_count": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"status": {
															"value": "EF",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "ETL-1-1-3-8-2 Update status to TR",
												"description": "TR : transfrom ready",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-1 Copy file to temp table",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
													"storedProcedureParameters": {
														"fileName": {
															"value": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_run_id": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_count": {
															"value": {
																"value": "@activity('ETL-1-1-3-8-1 Copy file to temp table').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"staging_load_count": {
															"value": {
																"value": "@activity('ETL-1-1-3-8-1 Copy file to temp table').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"status": {
															"value": "TR",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "ETL-1-1-3-8-6 Set isExtractFail  is True_copy1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-2 Update status to TR",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isExtractFail",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-9 Set isExtractFail  is True_copy2",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-5 Update guid to temp table",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isExtractFail",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-4 Set errorMessage",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-1 Copy file to temp table",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "errorMessage",
													"value": {
														"value": "@activity('ETL-1-1-3-8-1 Copy file to temp table').Error.Message",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL-1-1-3-8-1 Exit by Extract Fail",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "ETL-1-1-3-1-Set variable Container",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "container",
										"value": {
											"value": "@item().container_dir",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-2-Set variable Directory",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "directory",
										"value": {
											"value": "@item().import_dir",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-3 Set variable fileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().file_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-4-Set variable sinkSchema",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "tableSchema",
										"value": {
											"value": "@item().data_file_target_schema",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-5 Set variable sinkTableName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "tableName",
										"value": {
											"value": "@item().data_file_target_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-6 Set variable desDirectory",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorDirectory",
										"value": {
											"value": "@item().error_dir",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-7 Set variable columnDelimiter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "columnDelimiter",
										"value": {
											"value": "@item().delimiter",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-6 Check To Merge Data",
						"description": "if [Datetime] > [Datetime] Lastest Extract => start merge data from temp table to ODS",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ETL-1-1-4-Check current up to date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and( not(variables('isExtractFail')) , greater(activity('ETL-1-1-1-Lookup file_status is ER').output.count, 0)),\nequals(activity('ETL-1-1-4-Check current up to date').output.firstRow.Ncount, 0))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ETL-1-1-6-6 Exit merge process",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ETL-1-1-6-1 Merge data from temp to ODS",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_merge_Broad_Process_Wrapper]",
										"storedProcedureParameters": {
											"configId": {
												"value": {
													"value": "@pipeline().parameters.configId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"runId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-6-2 Update status SU",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-1 Merge data from temp to ODS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "SU",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-6-4 Move Files To Done Folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-2 Update status SU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Move_File",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@variables('container')",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@variables('directory')",
												"type": "Expression"
											},
											"desDirectory": {
												"value": "@variables('doneDirectory')",
												"type": "Expression"
											},
											"listFileName": {
												"value": "@variables('listFileName')",
												"type": "Expression"
											},
											"columDelimiter": {
												"value": "@variables('columnDelimiter')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ETL-1-1-6-3 Refresh  status file to ER",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-1 Merge data from temp to ODS",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "RF",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-6-5 Write log and send mail - merge data",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-3 Refresh  status file to ER",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": "Activity 'Merge data from temp to ODS' is Fail",
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-2-Truncate temp table",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ETL-1-1-1-Lookup file_status is ER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ods].[ctl_truncate_Temp_Table]",
							"storedProcedureParameters": {
								"configId": {
									"value": {
										"value": "@pipeline().parameters.configId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "connectSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ETL-1-1-4-Check current up to date",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ETL-1-1-3-ForEach",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @Ncount INT;\nEXEC [ods].[ctl_check_Data_Current_Up_To_Date]  @{pipeline().parameters.configId}, @Ncount OUTPUT;\nSELECT @Ncount AS Ncount;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Pilot_SQL_Broad",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Null",
									"schema": "Null"
								}
							}
						}
					},
					{
						"name": "ETL-1-1-7 IF Count Of Current Date  Greater Than 0",
						"description": "If ( count from $tempTable where [Date_Time] <= @current_up_to) > 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ETL-1-1-4-Check current up to date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('ETL-1-1-4-Check current up to date').output.firstRow.Ncount, 0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ETL-1-1-7-3 Wait 1s",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ETL-1-1-7-2 Execute Pipeline To Send Notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-7-1 Refresh  status file to ER_crd_greater_0",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": "The date time of current extract file is earlier than/equal  current_up_to",
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ETL-1-1-7-1 Refresh  status file to ER_crd_greater_0",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "RF",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-5 Extract Fail",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ETL-1-1-3-ForEach",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('isExtractFail')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ETL-1-1-5-1 Extract Files Completed",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ETL-1-1-5-1 Refresh  status file to ER",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "RF",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-5-2-Write log and send mail - extract fail",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-5-1 Refresh  status file to ER",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@string(variables('errorMessage'))",
												"type": "Expression"
											},
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-8 Write log and send mail - current up to",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ETL-1-1-4-Check current up to date",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_Control_Pipeline_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorMessage": "Activity 'Check Current Up To With File Date Time' Fail",
								"RunID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"TriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ETL-1-1-9 Refresh  status file to ER",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ETL-1-1-8 Write log and send mail - current up to",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
							"storedProcedureParameters": {
								"fileName": {
									"value": null,
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"source_count": {
									"value": null,
									"type": "Int32"
								},
								"staging_load_count": {
									"value": null,
									"type": "Int32"
								},
								"status": {
									"value": "RF",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "connectSQL",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"configId": {
						"type": "int"
					}
				},
				"variables": {
					"tableSchema": {
						"type": "String"
					},
					"tableName": {
						"type": "String"
					},
					"isExtractFail": {
						"type": "Boolean",
						"defaultValue": false
					},
					"container": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"directory": {
						"type": "String"
					},
					"doneDirectory": {
						"type": "String",
						"defaultValue": "Done"
					},
					"errorDirectory": {
						"type": "String",
						"defaultValue": "Error"
					},
					"columnDelimiter": {
						"type": "String"
					},
					"listFileName": {
						"type": "Array"
					},
					"errorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_InsertFileToControl_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IS-1-Lookup-infor-list-configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT data_file_config_id, data_file_config_name,\ndata_file_target_schema,data_file_target_table,\ncontainer_dir,import_dir,success_dir,error_dir\nFROM  [CONTROL].[DATA_FILE_CONFIGURATION] where data_file_config_id in (@{pipeline().parameters.listConfigId})",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Pilot_SQL_Broad",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Null",
									"schema": "Null"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IS-2-ForEach-lookup results",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "IS-1-Lookup-infor-list-configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('IS-1-Lookup-infor-list-configuration').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "IS-2-1-Execute Pipeline InsertFileToControl_Sub",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_InsertFileToControl_Sub",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Container": {
												"value": "@item().container_dir",
												"type": "Expression"
											},
											"Directory": {
												"value": "@item().import_dir",
												"type": "Expression"
											},
											"configName": {
												"value": "@item().data_file_config_name",
												"type": "Expression"
											},
											"tableSchema": {
												"value": "@item().data_file_target_schema",
												"type": "Expression"
											},
											"tableName": {
												"value": "@item().data_file_target_table",
												"type": "Expression"
											},
											"success_dir": {
												"value": "@item().success_dir",
												"type": "Expression"
											},
											"error_dir": {
												"value": "@item().error_dir",
												"type": "Expression"
											},
											"configId": {
												"value": "@item().data_file_config_id",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"listConfigId": {
						"type": "string",
						"defaultValue": "1,2"
					}
				},
				"variables": {
					"configID": {
						"type": "String"
					},
					"configName": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-18T16:48:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plp_InsertFileToControl_Sub')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_InsertFileToControl_Sub')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IS-2-1-1-Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Task",
								"value": "get list file instore"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Pliot_Metadata_Board",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.Directory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "IS-2-1-3-ForEach filter metadata result",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "IS-2-1-2-Filter Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('IS-2-1-2-Filter Files').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "IS-2-1-3-1 Insert fileName to control data_file",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_insert_Control_Data_File]",
										"storedProcedureParameters": {
											"ConfigId": {
												"value": {
													"value": "@pipeline().parameters.configId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Container": {
												"value": {
													"value": "@pipeline().parameters.Container",
													"type": "Expression"
												},
												"type": "String"
											},
											"Directory": {
												"value": {
													"value": "@pipeline().parameters.Directory",
													"type": "Expression"
												},
												"type": "String"
											},
											"FileName": {
												"value": {
													"value": "@item().name",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "IS-2-1-2-Filter Files",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "IS-2-1-1-Get Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('IS-2-1-1-Get Metadata').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().name, pipeline().parameters.configName)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					},
					"configName": {
						"type": "string"
					},
					"tableSchema": {
						"type": "string"
					},
					"tableName": {
						"type": "string"
					},
					"success_dir": {
						"type": "string"
					},
					"error_dir": {
						"type": "string"
					},
					"configId": {
						"type": "int"
					}
				},
				"variables": {
					"fileCounts": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-18T15:37:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Pliot_Metadata_Board')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EventTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/input/blobs/sales",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "/subscriptions/26edfad9-6834-4c07-b452-c8877d41c0a3/resourceGroups/ttp_rg_1/providers/Microsoft.Storage/storageAccounts/ttpstaccount",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/paramsTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2021-08-11T13:36:00Z",
						"endTime": "2021-08-11T15:36:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Pliot_Metadata_Board')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PilotConnectODS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}