{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ttpDatafactory"
		},
		"TG_Transfer_PilotDesDB_properties_plp_Transfer_Data_To_PilotDesDB_parameters_processConfigId": {
			"type": "int",
			"defaultValue": 1
		},
		"TG_ETL_Pilot_Data_properties_plp_Master_Process_parameters_listConfigId_S": {
			"type": "string",
			"defaultValue": "1,2,3,4,5,6,7,8,9"
		},
		"TG_ETL_Pilot_Data_properties_plp_Master_Process_parameters_listConfigId_Ar": {
			"type": "array",
			"defaultValue": [
				"1",
				"2",
				"3",
				"4",
				"5",
				"6",
				"7",
				"8",
				"9"
			]
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/plp_Move_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach To Move File",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listFileName",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy file to desDirectory",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_Pilot_Blod_Broad",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item()",
													"type": "Expression"
												},
												"columnDelimiter": {
													"value": "@pipeline().parameters.columDelimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Pilot_Blod_Broad",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.desDirectory",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item()",
													"type": "Expression"
												},
												"columnDelimiter": {
													"value": "@pipeline().parameters.columDelimiter",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete sourceFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy file to desDirectory",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_Pilot_Blod_Broad",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.sourceDirectory",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item()",
													"type": "Expression"
												},
												"columnDelimiter": {
													"value": "@pipeline().parameters.columDelimiter",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "PilotConnectODS",
												"type": "LinkedServiceReference"
											},
											"path": "pilot/Logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"container": {
						"type": "string"
					},
					"sourceDirectory": {
						"type": "string"
					},
					"desDirectory": {
						"type": "string"
					},
					"listFileName": {
						"type": "array"
					},
					"columDelimiter": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_SyncODSToSTG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TR-1-ForEach-ListConfigId",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listConfigId_Ar",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "TR-1-2-Get lastest transfer and current executionLogId",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "TR-1-1- Set variable configId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "DECLARE @startExecutionId INT;\nDECLARE @endExecutionId INT;\nDECLARE @odsTableName varchar(30);\n\nEXEC [ods].[ctl_get_ExecutionLogId_Information] @{variables('configId')}, @startExecutionId OUTPUT, @endExecutionId OUTPUT, @odsTableName OUTPUT\n\nSELECT @startExecutionId AS startExecutionId , @endExecutionId  AS endExecutionId, @odsTableName AS odsTableName\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Pilot_SQL_Broad",
											"type": "DatasetReference",
											"parameters": {
												"tableName": "Null",
												"schema": "Null"
											}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "TR-1-3-IF- Data has changed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "TR-1-2-1- Set variable startExecutionId",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-2-2- Set variable endExecutionId",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-2-3- Set variable ODSTableName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('TR-1-2-Get lastest transfer and current executionLogId').output.value[0].endExecutionId , activity('TR-1-2-Get lastest transfer and current executionLogId').output.value[0].startExecutionId)\n",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "TR-1-3-1- Exit by no data has changed",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "TR-1-3-2-Update status transfer to successful",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "TR-1-3-1-Transfer data from ODS to STG",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_etl_process_log]",
													"storedProcedureParameters": {
														"configId": {
															"value": {
																"value": "@variables('configId')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"endExecutionId": {
															"value": {
																"value": "@variables('endExcutionId')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"runId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"startExecutionId": {
															"value": {
																"value": "@variables('startExecutionId')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"tableName": {
															"value": {
																"value": "@variables('odsTableName')",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "TR-1-3-3-Pipeline to control error",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "TR-1-3-1-Transfer data from ODS to STG",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "plp_Control_Pipeline_Fail",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"ErrorMessage": {
															"value": "@activity('TR-1-3-1-Transfer data from ODS to STG').Error.message",
															"type": "Expression"
														},
														"RunID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@pipeline().TriggerName",
															"type": "Expression"
														},
														"TriggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "TR-1-3-4- Set variable isTransferError to True",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "TR-1-3-1-Transfer data from ODS to STG",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isTransferError",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "TR-1-3-1-Transfer data from ODS to STG",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[stg].[usp_merge_ODS_To_STG_Process_Wrapper]",
													"storedProcedureParameters": {
														"configId": {
															"value": {
																"value": "@variables('configId')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"endExecutionId": {
															"value": {
																"value": "@variables('endExcutionId')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"startExecutionId": {
															"value": {
																"value": "@variables('startExecutionId')",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "TR-1-3-4-Set isDataChanged to True",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "TR-1-3-2-Update status transfer to successful",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isDataChanged",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "TR-1-1- Set variable configId",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "configId",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-2-1- Set variable startExecutionId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TR-1-2-Get lastest transfer and current executionLogId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "startExecutionId",
										"value": {
											"value": "@string(activity('TR-1-2-Get lastest transfer and current executionLogId').output.value[0].startExecutionId)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-2-2- Set variable endExecutionId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TR-1-2-Get lastest transfer and current executionLogId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "endExcutionId",
										"value": {
											"value": "@string(activity('TR-1-2-Get lastest transfer and current executionLogId').output.value[0].endExecutionId)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-2-3- Set variable ODSTableName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "TR-1-2-Get lastest transfer and current executionLogId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "odsTableName",
										"value": {
											"value": "@string(activity('TR-1-2-Get lastest transfer and current executionLogId').output.value[0].odsTableName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-2-4 Write log and send notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "TR-1-2-Get lastest transfer and current executionLogId",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('TR-1-2-Get lastest transfer and current executionLogId').Error.Message",
												"type": "Expression"
											},
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "TR-2-2-Check data changed on STG",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "TR-1-ForEach-ListConfigId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('isDataChanged')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "TR-2-2-2- No Data Transfer to TSG",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "TR-2-2-1-Lastest Update STG Guid",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[stg].[usp_update_Guid_On_STG_Board]"
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "TR-2-2-2 Write log and send notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "TR-2-2-1-Lastest Update STG Guid",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('TR-2-2-1-Lastest Update STG Guid').Error.Message",
												"type": "Expression"
											},
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"listConfigId_Ar": {
						"type": "array",
						"defaultValue": [
							"1"
						]
					}
				},
				"variables": {
					"configId": {
						"type": "String"
					},
					"startExecutionId": {
						"type": "String"
					},
					"endExcutionId": {
						"type": "String"
					},
					"isTransferError": {
						"type": "Boolean",
						"defaultValue": false
					},
					"odsTableName": {
						"type": "String"
					},
					"isDataChanged": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_Transfer_Data_To_PilotDesDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TR-1-Get transfer process information",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "TR-0 Insert process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT a.process_id, b.concurrent_trans_name, b.start_execution_id, b.end_execution_id, b.is_complete,\nREPLACE(REPLACE(SUBSTRING( b.concurrent_trans_name ,CHARINDEX('.',  b.concurrent_trans_name)+1 , LEN( b.concurrent_trans_name)), '[' ,''), ']','')+'Type' as table_type,\n'[stg].[usp_transfer_Board_' + REPLACE(REPLACE(SUBSTRING( b.concurrent_trans_name ,CHARINDEX('.',  b.concurrent_trans_name)+1 , LEN( b.concurrent_trans_name)), '[' ,''), ']','')+']' as transfer_sp\nFROM [control].[process] a\nINNER JOIN [control].[process_concurrent_trans] b ON a.process_id = b.process_id\nWHERE a.process_config_id = @{pipeline().parameters.processConfigId} AND a.process_status ='PR';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Pilot_SQL_Broad",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Null",
									"schema": "Null"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TR-2-ForEach-lookup results",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "TR-1-Get transfer process information",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('TR-1-Get transfer process information').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "TR-1-1- Set variable startExecutionId",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "startExecutionId",
										"value": {
											"value": "@string(item().start_execution_id)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-2- Set variable endExecutionId",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "endExcutionId",
										"value": {
											"value": "@string(item().end_execution_id)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-4- Set variable concurrentTransName_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "concurrentTransName",
										"value": {
											"value": "@item().concurrent_trans_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-3- Set variable isComplete",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "isComplete",
										"value": {
											"value": "@string(item().is_complete)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-8-IF- Data has changed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "TR-1-1- Set variable startExecutionId",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-2- Set variable endExecutionId",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-4- Set variable concurrentTransName_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-3- Set variable isComplete",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-5- Set variable tableType",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-6- Set variable processId",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "TR-1-7- Set variable transferSP",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\ngreater(int(variables('endExcutionId')), int(variables('startExecutionId'))),\nequals(variables('isComplete'),'False')\n)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "TR-1-8-4-Update sub process status",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Process_Status]",
													"storedProcedureParameters": {
														"concurrentTransName": {
															"value": {
																"value": "@variables('concurrentTransName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"isComplete": {
															"value": "1",
															"type": "Int32"
														},
														"pipelineRunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"processId": {
															"value": {
																"value": "@variables('processId')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"processStatus": {
															"value": null,
															"type": "String"
														},
														"updateType": {
															"value": "1",
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "TR-1-8-1-Transfer data to Des DB",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select * from @{variables('concurrentTransName')}\nwhere ODSLastUpdateExecutionId > @{variables('startExecutionId')} \nand ODSLastUpdateExecutionId <= @{variables('endExcutionId')}\n;",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "SqlServerSink",
														"sqlWriterStoredProcedureName": {
															"value": "@variables('transferSPName')",
															"type": "Expression"
														},
														"sqlWriterTableType": {
															"value": "@variables('tableType')",
															"type": "Expression"
														},
														"storedProcedureTableTypeParameterName": "source",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_Pilot_SQL_Broad",
														"type": "DatasetReference",
														"parameters": {
															"tableName": "Null",
															"schema": "Null"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Pilot_SQL_AWS_DES",
														"type": "DatasetReference",
														"parameters": {
															"dbName": "pilotDesDB"
														}
													}
												]
											},
											{
												"name": "TR-1-8-2-Update sub process status",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "TR-1-8-1-Transfer data to Des DB",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Process_Status]",
													"storedProcedureParameters": {
														"concurrentTransName": {
															"value": {
																"value": "@variables('concurrentTransName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"isComplete": {
															"value": "1",
															"type": "Int32"
														},
														"pipelineRunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"processId": {
															"value": {
																"value": "@variables('processId')",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"processStatus": {
															"value": null,
															"type": "String"
														},
														"updateType": {
															"value": "1",
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "TR-1-8-3-Pipeline to control error",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "TR-1-8-1-Transfer data to Des DB",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "plp_Control_Pipeline_Fail",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"PipelineName": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"DataFactoryName": {
															"value": "@pipeline().DataFactory",
															"type": "Expression"
														},
														"ErrorMessage": {
															"value": "@activity('TR-1-8-1-Transfer data to Des DB').output.errors[0].Message",
															"type": "Expression"
														},
														"RunID": {
															"value": "@pipeline().RunId",
															"type": "Expression"
														},
														"TriggerName": {
															"value": "@pipeline().TriggerName",
															"type": "Expression"
														},
														"TriggerTime": {
															"value": "@pipeline().TriggerTime",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "TR-1-6- Set variable processId",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "processId",
										"value": {
											"value": "@string(item().process_id)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-5- Set variable tableType",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "tableType",
										"value": {
											"value": "@item().table_type",
											"type": "Expression"
										}
									}
								},
								{
									"name": "TR-1-7- Set variable transferSP",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "transferSPName",
										"value": {
											"value": "@item().transfer_sp",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "TR-3-Update process status SU",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "TR-2-ForEach-lookup results",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ods].[ctl_update_Process_Status]",
							"storedProcedureParameters": {
								"concurrentTransName": {
									"value": {
										"value": "@variables('concurrentTransName')",
										"type": "Expression"
									},
									"type": "String"
								},
								"isComplete": {
									"value": null,
									"type": "Int32"
								},
								"pipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"processId": {
									"value": {
										"value": "@variables('processId')",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"processStatus": {
									"value": "SU",
									"type": "String"
								},
								"updateType": {
									"value": "2",
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "connectSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "TR-0 Insert process",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[stg].[usp_transfer_Board_To_PilotDesDB]",
							"storedProcedureParameters": {
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "connectSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "TR-4-Pipeline to control error",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TR-0 Insert process",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_Control_Pipeline_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('TR-0 Insert process').Error.Message",
									"type": "Expression"
								},
								"RunID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"TriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "TR-5-Pipeline to control error",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TR-3-Update process status SU",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_Control_Pipeline_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('TR-3-Update process status SU').Error.Message",
									"type": "Expression"
								},
								"RunID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"TriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"processConfigId": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"startExecutionId": {
						"type": "String"
					},
					"endExcutionId": {
						"type": "String"
					},
					"isTransferError": {
						"type": "Boolean",
						"defaultValue": false
					},
					"transferSPName": {
						"type": "String"
					},
					"processId": {
						"type": "String"
					},
					"concurrentTransName": {
						"type": "String"
					},
					"isComplete": {
						"type": "String"
					},
					"tableType": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_ETL_Sub')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETL-1-1-1-Lookup file_status is ER",
						"description": "Get list file name with configId=$id and file_status='ER'",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select a.file_name ,b.data_file_target_schema,b.data_file_target_table,b.container_dir,b.import_dir\n,b.success_dir,b.error_dir, b.delimiter\nfrom control.data_file a\nleft join control.data_file_configuration b on a.data_file_config_id = b.data_file_config_id \nwhere a.file_status in ('ER') and a.data_file_config_id =@{pipeline().parameters.configId}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Pilot_SQL_Broad",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Null",
									"schema": "Null"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ETL-1-1-3-ForEach",
						"description": "For loop list file from result lookup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ETL-1-1-2-Truncate temp table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ETL-1-1-1-Lookup file_status is ER').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ETL-1-1-3-8 IF Check isExtractFail",
									"description": "If isExtractFail = true => stop process extract file from file to ods on configId",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "ETL-1-1-3-1-Set variable Container",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-3 Set variable fileName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-2-Set variable Directory",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-4-Set variable sinkSchema",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-5 Set variable sinkTableName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-6 Set variable desDirectory",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ETL-1-1-3-7 Set variable columnDelimiter",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('isExtractFail')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "ETL-1-1-3-8-1 Copy file to temp table",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_Pilot_Blod_Broad",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@variables('container')",
																"type": "Expression"
															},
															"directory": {
																"value": "@variables('directory')",
																"type": "Expression"
															},
															"fileName": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"columnDelimiter": "\t"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Pilot_SQL_Broad",
														"type": "DatasetReference",
														"parameters": {
															"tableName": {
																"value": "@variables('tableName')",
																"type": "Expression"
															},
															"schema": {
																"value": "@variables('tableSchema')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "ETL-1-1-3-8-7 Set isExtractFail  is True",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-3 Update status to EF",
														"dependencyConditions": [
															"Completed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isExtractFail",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-8 Append fileName to listFileName",
												"type": "AppendVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-5 Update guid to temp table",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "listFileName",
													"value": {
														"value": "@variables('fileName')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-5 Update guid to temp table",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-2 Update status to TR",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Data_File_Id]",
													"storedProcedureParameters": {
														"fileName": {
															"value": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"tableName": {
															"value": {
																"value": "@concat(variables('tableSchema'), '.' , variables('tableName'))",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "ETL-1-1-3-8-3 Update status to EF",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-1 Copy file to temp table",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
													"storedProcedureParameters": {
														"fileName": {
															"value": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_run_id": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_count": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"staging_load_count": {
															"value": {
																"value": "0",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"status": {
															"value": "EF",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "ETL-1-1-3-8-2 Update status to TR",
												"description": "TR : transfrom ready",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-1 Copy file to temp table",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
													"storedProcedureParameters": {
														"fileName": {
															"value": {
																"value": "@variables('fileName')",
																"type": "Expression"
															},
															"type": "String"
														},
														"pipeline_run_id": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"source_count": {
															"value": {
																"value": "@activity('ETL-1-1-3-8-1 Copy file to temp table').output.rowsRead",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"staging_load_count": {
															"value": {
																"value": "@activity('ETL-1-1-3-8-1 Copy file to temp table').output.rowsCopied",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"status": {
															"value": "TR",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "connectSQL",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "ETL-1-1-3-8-6 Set isExtractFail  is True_copy1",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-2 Update status to TR",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isExtractFail",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-9 Set isExtractFail  is True_copy2",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-5 Update guid to temp table",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "isExtractFail",
													"value": {
														"value": "@bool(1)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ETL-1-1-3-8-4 Set errorMessage",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ETL-1-1-3-8-1 Copy file to temp table",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "errorMessage",
													"value": {
														"value": "@activity('ETL-1-1-3-8-1 Copy file to temp table').Error.Message",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "ETL-1-1-3-8-1 Exit by Extract Fail",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								},
								{
									"name": "ETL-1-1-3-1-Set variable Container",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "container",
										"value": {
											"value": "@item().container_dir",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-2-Set variable Directory",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "directory",
										"value": {
											"value": "@item().import_dir",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-3 Set variable fileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@item().file_name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-4-Set variable sinkSchema",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "tableSchema",
										"value": {
											"value": "@item().data_file_target_schema",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-5 Set variable sinkTableName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "tableName",
										"value": {
											"value": "@item().data_file_target_table",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-6 Set variable desDirectory",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorDirectory",
										"value": {
											"value": "@item().error_dir",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ETL-1-1-3-7 Set variable columnDelimiter",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "columnDelimiter",
										"value": {
											"value": "@item().delimiter",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-6 Check To Merge Data",
						"description": "if [Datetime] > [Datetime] Lastest Extract => start merge data from temp table to ODS",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ETL-1-1-4-Check current up to date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(and( not(variables('isExtractFail')) , greater(activity('ETL-1-1-1-Lookup file_status is ER').output.count, 0)),\nequals(activity('ETL-1-1-4-Check current up to date').output.firstRow.Ncount, 0))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ETL-1-1-6-6 Exit merge process",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ETL-1-1-6-1 Merge data from temp to ODS",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_merge_Broad_Process_Wrapper]",
										"storedProcedureParameters": {
											"configId": {
												"value": {
													"value": "@pipeline().parameters.configId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"runId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-6-2 Update status SU",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-1 Merge data from temp to ODS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "SU",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-6-4 Move Files To Done Folder",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-2 Update status SU",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Move_File",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"container": {
												"value": "@variables('container')",
												"type": "Expression"
											},
											"sourceDirectory": {
												"value": "@variables('directory')",
												"type": "Expression"
											},
											"desDirectory": {
												"value": "@variables('doneDirectory')",
												"type": "Expression"
											},
											"listFileName": {
												"value": "@variables('listFileName')",
												"type": "Expression"
											},
											"columDelimiter": {
												"value": "@variables('columnDelimiter')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ETL-1-1-6-3 Refresh  status file to ER",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-1 Merge data from temp to ODS",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "RF",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-6-5 Write log and send mail - merge data",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-6-3 Refresh  status file to ER",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@activity('ETL-1-1-6-1 Merge data from temp to ODS').Error.Message",
												"type": "Expression"
											},
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-2-Truncate temp table",
						"description": "",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ETL-1-1-1-Lookup file_status is ER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ods].[ctl_truncate_Temp_Table]",
							"storedProcedureParameters": {
								"configId": {
									"value": {
										"value": "@pipeline().parameters.configId",
										"type": "Expression"
									},
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "connectSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ETL-1-1-4-Check current up to date",
						"description": "",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ETL-1-1-3-ForEach",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "DECLARE @Ncount INT;\nEXEC [ods].[ctl_check_Data_Current_Up_To_Date]  @{pipeline().parameters.configId}, @Ncount OUTPUT;\nSELECT @Ncount AS Ncount;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Pilot_SQL_Broad",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Null",
									"schema": "Null"
								}
							}
						}
					},
					{
						"name": "ETL-1-1-7 IF Count Of Current Date  Greater Than 0",
						"description": "If ( count from $tempTable where [Date_Time] <= @current_up_to) > 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ETL-1-1-4-Check current up to date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('ETL-1-1-4-Check current up to date').output.firstRow.Ncount, 0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ETL-1-1-7-3 Wait 1s",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ETL-1-1-7-2 Execute Pipeline To Send Notification",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-7-1 Refresh  status file to ER_crd_greater_0",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": "The date time of current extract file is earlier than/equal  current_up_to",
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ETL-1-1-7-1 Refresh  status file to ER_crd_greater_0",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "RF",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-5 Extract Fail",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ETL-1-1-3-ForEach",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('isExtractFail')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ETL-1-1-5-1 Refresh  status file to ER",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
										"storedProcedureParameters": {
											"fileName": {
												"value": null,
												"type": "String"
											},
											"pipeline_run_id": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"source_count": {
												"value": null,
												"type": "Int32"
											},
											"staging_load_count": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "RF",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "connectSQL",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ETL-1-1-5-2-Write log and send mail - extract fail",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "ETL-1-1-5-1 Refresh  status file to ER",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_Control_Pipeline_Fail",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PipelineName": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"DataFactoryName": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											},
											"ErrorMessage": {
												"value": "@string(variables('errorMessage'))",
												"type": "Expression"
											},
											"RunID": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"TriggerName": {
												"value": "@pipeline().TriggerName",
												"type": "Expression"
											},
											"TriggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "ETL-1-1-8 Write log and send mail - current up to",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ETL-1-1-4-Check current up to date",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_Control_Pipeline_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorMessage": "Activity 'Check Current Up To With File Date Time' Fail",
								"RunID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"TriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ETL-1-1-9 Refresh  status file to ER",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ETL-1-1-8 Write log and send mail - current up to",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[ods].[ctl_update_Data_File_Status]",
							"storedProcedureParameters": {
								"fileName": {
									"value": null,
									"type": "String"
								},
								"pipeline_run_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"source_count": {
									"value": null,
									"type": "Int32"
								},
								"staging_load_count": {
									"value": null,
									"type": "Int32"
								},
								"status": {
									"value": "RF",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "connectSQL",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ETL-1-1-10- Write log and send notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ETL-1-1-1-Lookup file_status is ER",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_Control_Pipeline_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('ETL-1-1-1-Lookup file_status is ER').Error.Message",
									"type": "Expression"
								},
								"RunID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"TriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ETL-1-1-11- Write log and send notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ETL-1-1-2-Truncate temp table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_Control_Pipeline_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('ETL-1-1-2-Truncate temp table').Error.Message",
									"type": "Expression"
								},
								"RunID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"TriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"configId": {
						"type": "int"
					}
				},
				"variables": {
					"tableSchema": {
						"type": "String"
					},
					"tableName": {
						"type": "String"
					},
					"isExtractFail": {
						"type": "Boolean",
						"defaultValue": false
					},
					"container": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"directory": {
						"type": "String"
					},
					"doneDirectory": {
						"type": "String",
						"defaultValue": "Done"
					},
					"errorDirectory": {
						"type": "String",
						"defaultValue": "Error"
					},
					"columnDelimiter": {
						"type": "String"
					},
					"listFileName": {
						"type": "Array"
					},
					"errorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plp_Move_File')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_InsertFileToControl_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IS-1-Lookup-infor-list-configuration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT data_file_config_id, data_file_config_name,\ndata_file_target_schema,data_file_target_table,\ncontainer_dir,import_dir,success_dir,error_dir\nFROM  [CONTROL].[DATA_FILE_CONFIGURATION] where data_file_config_id in (@{pipeline().parameters.listConfigId})",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Pilot_SQL_Broad",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Null",
									"schema": "Null"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IS-2-ForEach-lookup results",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "IS-1-Lookup-infor-list-configuration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('IS-1-Lookup-infor-list-configuration').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "IS-2-1-Execute Pipeline InsertFileToControl_Sub",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_InsertFileToControl_Sub",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Container": {
												"value": "@item().container_dir",
												"type": "Expression"
											},
											"Directory": {
												"value": "@item().import_dir",
												"type": "Expression"
											},
											"configName": {
												"value": "@item().data_file_config_name",
												"type": "Expression"
											},
											"tableSchema": {
												"value": "@item().data_file_target_schema",
												"type": "Expression"
											},
											"tableName": {
												"value": "@item().data_file_target_table",
												"type": "Expression"
											},
											"success_dir": {
												"value": "@item().success_dir",
												"type": "Expression"
											},
											"error_dir": {
												"value": "@item().error_dir",
												"type": "Expression"
											},
											"configId": {
												"value": "@item().data_file_config_id",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "IS-3 Pipeline control error",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "IS-1-Lookup-infor-list-configuration",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_Control_Pipeline_Fail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PipelineName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"DataFactoryName": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"ErrorMessage": {
									"value": "@activity('IS-1-Lookup-infor-list-configuration').Error.Message",
									"type": "Expression"
								},
								"RunID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"TriggerName": {
									"value": "@pipeline().TriggerName",
									"type": "Expression"
								},
								"TriggerTime": {
									"value": "@pipeline().TriggerTime",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"listConfigId": {
						"type": "string",
						"defaultValue": "1,2"
					}
				},
				"variables": {
					"configID": {
						"type": "String"
					},
					"configName": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"isPipelineFail": {
						"type": "Boolean",
						"defaultValue": false
					},
					"errorMessage": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": [],
				"lastPublishTime": "2021-08-18T16:48:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TG_Transfer_PilotDesDB')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scheduler for transfer data from DW to PilotDesDB",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "plp_Transfer_Data_To_PilotDesDB",
							"type": "PipelineReference"
						},
						"parameters": {
							"processConfigId": "[parameters('TG_Transfer_PilotDesDB_properties_plp_Transfer_Data_To_PilotDesDB_parameters_processConfigId')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 2,
						"startTime": "2021-09-07T03:57:00Z",
						"endTime": "2021-09-08T03:57:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plp_Transfer_Data_To_PilotDesDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_ETL_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETL-1-ForEach list config id",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listConfigId",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 4,
							"activities": [
								{
									"name": "ETL-1-1-Execute Pipeline ETL Sub",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "plp_ETL_Sub",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"configId": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"parameters": {
					"listConfigId": {
						"type": "array",
						"defaultValue": [
							"1"
						]
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plp_ETL_Sub')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/plp_Master_Process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MP-1-Insert new files to control data-file",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_InsertFileToControl_Main",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"listConfigId": {
									"value": "@pipeline().parameters.listConfigId_S",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MP-2-Extract files to ODS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MP-1-Insert new files to control data-file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_ETL_Main",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"listConfigId": {
									"value": "@pipeline().parameters.listConfigId_Ar",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "MP-3-Sync data from ODS to STG",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "MP-2-Extract files to ODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "plp_SyncODSToSTG",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"listConfigId_Ar": {
									"value": "@pipeline().parameters.listConfigId_Ar",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"listConfigId_S": {
						"type": "string",
						"defaultValue": "1,2,3,4,5,6,7,8,9"
					},
					"listConfigId_Ar": {
						"type": "array",
						"defaultValue": [
							"1",
							"2",
							"3",
							"4",
							"5",
							"6",
							"7",
							"8",
							"9"
						]
					}
				},
				"folder": {
					"name": "Pilot"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plp_InsertFileToControl_Main')]",
				"[concat(variables('factoryId'), '/pipelines/plp_ETL_Main')]",
				"[concat(variables('factoryId'), '/pipelines/plp_SyncODSToSTG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TG_ETL_Pilot_Data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "plp_Master_Process",
							"type": "PipelineReference"
						},
						"parameters": {
							"listConfigId_S": "[parameters('TG_ETL_Pilot_Data_properties_plp_Master_Process_parameters_listConfigId_S')]",
							"listConfigId_Ar": "[parameters('TG_ETL_Pilot_Data_properties_plp_Master_Process_parameters_listConfigId_Ar')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2021-09-07T08:00:00Z",
						"endTime": "2021-09-08T07:49:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/plp_Master_Process')]"
			]
		}
	]
}