{
	"name": "plp_ETL_Main",
	"properties": {
		"activities": [
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@pipeline().parameters.listConfigId",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Get EF Files",
							"description": "if count of 'EF' file > 0 => stop copy file to DB on configId",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Set variable1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select file_name from control.data_file where file_status in ('EF') and data_file_config_id =@{item()}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_GetDataFromDB",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Check Exists EF File",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get EF Files",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(activity('Get EF Files').output.count,0)",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Start Copy File to DB",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "plp_ETL_Sub",
												"type": "PipelineReference"
											},
											"waitOnCompletion": true,
											"parameters": {
												"configId": {
													"value": "@variables('configId')",
													"type": "Expression"
												}
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "Exit By Exists EF File",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 1
										}
									}
								]
							}
						},
						{
							"name": "Set variable1",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "configId",
								"value": {
									"value": "@item()",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "ADF Pipeline Excutions Log",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEach1",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "plp_Control_Pipeline_Fail",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"DataFactoryName": {
							"value": "@pipeline().DataFactory",
							"type": "Expression"
						},
						"ErrorMessage": "''",
						"RunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"TriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"TriggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"listConfigId": {
				"type": "array",
				"defaultValue": [
					"1"
				]
			}
		},
		"variables": {
			"configId": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Pilot"
		},
		"annotations": []
	}
}