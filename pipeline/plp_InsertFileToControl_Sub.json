{
	"name": "plp_InsertFileToControl_Sub",
	"properties": {
		"activities": [
			{
				"name": "IS-2-1-1-Get Metadata",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Task",
						"value": "get list file instore"
					}
				],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_Pliot_Metadata_Board",
						"type": "DatasetReference",
						"parameters": {
							"Container": {
								"value": "@pipeline().parameters.Container",
								"type": "Expression"
							},
							"Directory": {
								"value": "@pipeline().parameters.Directory",
								"type": "Expression"
							}
						}
					},
					"fieldList": [
						"itemName",
						"itemType",
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "IS-2-1-3-ForEach filter metadata result",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "IS-2-1-2-Filter Files",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('IS-2-1-2-Filter Files').output.Value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "IS-2-1-3-1 Insert fileName to control data_file",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[ods].[ctl_insert_Control_Data_File]",
								"storedProcedureParameters": {
									"ConfigId": {
										"value": {
											"value": "@pipeline().parameters.configId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"Container": {
										"value": {
											"value": "@pipeline().parameters.Container",
											"type": "Expression"
										},
										"type": "String"
									},
									"Directory": {
										"value": {
											"value": "@pipeline().parameters.Directory",
											"type": "Expression"
										},
										"type": "String"
									},
									"FileName": {
										"value": {
											"value": "@item().name",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "connectSQL",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "IS-2-1-3-3 Set errorMessage",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "IS-2-1-3-1 Insert fileName to control data_file",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "errorMessage",
								"value": {
									"value": "@activity('IS-2-1-3-1 Insert fileName to control data_file').Error.Message",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "IS-2-1-2-Filter Files",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "IS-2-1-1-Get Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('IS-2-1-1-Get Metadata').output.childitems",
						"type": "Expression"
					},
					"condition": {
						"value": "@startswith(item().name, pipeline().parameters.configName)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "IS-2-1-4 Pipeline to control error",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "IS-2-1-1-Get Metadata",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "plp_Control_Pipeline_Fail",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"DataFactoryName": {
							"value": "@pipeline().DataFactory",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@activity('IS-2-1-1-Get Metadata').Error.Message",
							"type": "Expression"
						},
						"RunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"TriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"TriggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "IS-2-1-5 Pipeline to control error",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "IS-2-1-3-ForEach filter metadata result",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "plp_Control_Pipeline_Fail",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"PipelineName": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"DataFactoryName": {
							"value": "@pipeline().DataFactory",
							"type": "Expression"
						},
						"ErrorMessage": {
							"value": "@variables('errorMessage')",
							"type": "Expression"
						},
						"RunID": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"TriggerName": {
							"value": "@pipeline().TriggerName",
							"type": "Expression"
						},
						"TriggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"Container": {
				"type": "string"
			},
			"Directory": {
				"type": "string"
			},
			"configName": {
				"type": "string"
			},
			"tableSchema": {
				"type": "string"
			},
			"tableName": {
				"type": "string"
			},
			"success_dir": {
				"type": "string"
			},
			"error_dir": {
				"type": "string"
			},
			"configId": {
				"type": "int"
			}
		},
		"variables": {
			"fileCounts": {
				"type": "String"
			},
			"errorMessage": {
				"type": "String"
			},
			"isPipelineFail": {
				"type": "Boolean",
				"defaultValue": false
			}
		},
		"folder": {
			"name": "Pilot"
		},
		"annotations": [],
		"lastPublishTime": "2021-08-18T15:37:49Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}